## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
sum.plus.2 <- function(x){
sum(x) + 2
}
apply(mat1, 1, sum.plus.2)
apply(mat1, 1, function(x, y) sum(x) + y, y=3)
apply(mat1, 2, function(x, y) sum(x) + y, y=5)
apply(mat1, 2)
mat1.df <- data.frame(mat1)
mat1.df
is.list(mat1.df)
lapply(mat1.df, sum)
y <- lapply(mat1.df, sum)
is.list(y)
names(y)
unlist(lapply(1:5, function(i) 5+i ))
outVec <- NULL
for(i in 1:5){
outVec <- c(outVec, 5+i)
}
outVec
y2 <- sapply(mat1.df, function(x, y) sum(x) + y, y = 5)
y2
is.vector(y2)
is.list(y2)
x1 <- runif(16)
x1
cat1 <- rep(1:4, 4)
cat1
cat2 <- c(rep(1, 8), rep(2, 8))
cat2
mat2.df <- data.frame(x1)
names(mat2.df) <- c("x1")
mat2.df$cat1 <- cat1
mat2.df$cat2 <- cat2
mat2.df
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
outVec <- NULL
for (i in unique(mat2.df$cat1)){
outVec <- c(outVec, mean(mat2.df$x1[mat2.df$cat1==i]))
}
outVec
tapply(mat2.df$x1, list(mat2.df$cat1, mat2.df$cat2), mean)
mean(mat2.df$x1[mat2.df$cat1==1 & mat2.df$cat2==1])
a <- matrix(runif(100, 1, 2),20)
a
a.df <- data.frame(a)
colMeans(a)
a1 <- sweep(a, 2, colMeans(a), "-")
a1
colMeans(a1)
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
mat2.df
byOut <- by(data=mat2.df$x1, INDICES=mat2.df$cat1, mean)
str(byOut)
length(byOut)
is.list(byOut)
is.vector(byOut)
class(byOut)
l <- list(a = 1:10, b = 11:20)
l
?fivenum
l.fivenum <- vapply(X=l, FUN=fivenum, FUN.VALUE=c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
class(l.fivenum)
l.fivenum
replicate(10, rnorm(10))
replicate(10, rnorm(5))
l1 <- list(a = c(1:10), b = c(11:20))
l2 <- list(c = c(21:30), d = c(31:40))
l1
l2
mapply(sum, l1$a, l1$b, l2$c, l2$d)
dd<-data.frame(matrix(rnorm(216),72,3),c(rep("A",24),rep("B",24),rep("C",24)),c(rep("J",36),rep("K",36)))
dd
colnames(dd) <- c("v1", "v2", "v3", "dim1", "dim2")
head(dd)
library(plyr)
obj1 <- ddply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df) mean(df$v1))
obj1
obj2 <- daply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df)mean(df$v1))
obj2 # why are these different?
l_ply(1:100, identity)
llply(1:100, identity)
laply(1:100, identity)
ldply(1:100, identity)
library('doMC')
install.packages("doMC")
library('doMC')
library('doMC')
library('foreach')
myX <- 20
myY <- c(1:100)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=4)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=1)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=2)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
a1<-(runif(20*5*1000), dim=c(20,5,1000))
a1<-array(runif(20*5*1000), dim=c(20,5,1000))
structure(a1)
dim(a1)
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
a0<-(runif(20),dim=(4,5))
a0<-array(runif(20),dim=(4,5))
a0<-array(runif(20), dim=(4,5))
a0<-array(runif(20), dim=(4,5,1))
a0 <-array(runif(20), dim=(4,5))
a8 <-array(runif(20), dim=(4,5))
a0 <-array(runif(20), dim=c(4,5))
a0
b0<-c(3:7)
x<-apply(a0, c(1,3), %*%b0)
x<-apply(a0, c(1,3), function(x) x%*%b0)
x<-apply(a0, c(1,3), function(y) y%*%b0)
b0
x<-apply(a0, 1, function(y) y%*%b0)
b0
a0
x<-apply(a0, 1, function(y) y%*%b0)
x
library(htmltab)
library(rvest)
icjURL <- 'http://www.icj-cij.org/docket/index.php?p1=3&p2=2'
temp <- icjURL %>%
read_html %>%
html_nodes("table")
temp
table[1]
table[[1]]
temp[[1]]
temp[[2]]
temp[2]
?system.time
listna<-list(4,6,2,NA,9,0)
length(listna)
?is.equal
?lapply
nums<-c(8,4,6,9,3,3,0)
unique(nums)
uniques<-unique(nums)
sorted<-sort(nums)
nums==sorted
numes==uniques
nums==uniques
?all.equal
all.equal(nums,sorted)
isTRUE(all.equal(nums,sorted))
numnum<-c(8,4,6,9,3,3,0)
isTRUE(all.equal(nums,numnum))
isTRUE(all.equal(nums,uniques))
x<-511
xxx<-511
xxx<-82
ans<-0
hash<-function(x,y){
hold=(31*x)%%511 + y%%511
ans<-hold%%511
}
hash(97,97)
hash<-function(x,y){
hold=(31*x)%%511 + y%%511
ans<-hold%%511
return(ans)
}
hash(97,97)
hash(0,97)
has(97,97)
hash(97,97)
hash(38,98)
hash(254,97)
print("this")
print("this", 18)
print(c("this", 18))
?pnorm
pnorm(2)
pnorm(0)
1-pnorm(2)
200000^.5
getwd()
rm(list=ls())
setwd('~/Desktop/gitstuff/ireland_minutes')
getwd()
list.files()
rc_full = read.csv('seanad_sep12-cur_votes.csv', stringsAsFactors = F)
names = names(rc_full)
rc_full = as.matrix(rc_full)
names(rc_full) = names
rc_no_leg = rc_full[,1:9]
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
if (any(rc_no_leg[r,1:6]!=(rc_no_leg[r+1,1:6]))){
print("problem")  }
}
}
## no problem! All pairs of rows match up perfectly, except for TA/NIL split
rc_by_vote = rep(NA,9)
## creating new matrix, where TA and NIL tallies are in same row
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
new_row = c(rc_no_leg[r,1:7],rc_no_leg[r,9],rc_no_leg[r+1,9])
rc_by_vote = rbind(rc_by_vote,new_row)
}
}
rownames(rc_by_vote)=NULL
colnames(rc_by_vote) = c(colnames(rc_no_leg)[1:7],"TA_Tally", "NIL_Tally")
## dropping first row (which was all NAs, as a placeholder)
rc_by_vote = rc_by_vote[-1,]
months = c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December')
## adding a column of NAs at the back, to be replaced by numeric month value
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
for (r in 1:nrow(rc_by_vote)){
rc_by_vote[r,ncol(rc_by_vote)]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
}
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
rm(list=ls())
rc_full = read.csv('seanad_sep12-cur_votes.csv', stringsAsFactors = F)
names = names(rc_full)
rc_full = as.matrix(rc_full)
names(rc_full) = names
rc_no_leg = rc_full[,1:9]
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
if (any(rc_no_leg[r,1:6]!=(rc_no_leg[r+1,1:6]))){
print("problem")  }
}
}
## no problem! All pairs of rows match up perfectly, except for TA/NIL split
rc_by_vote = rep(NA,9)
## creating new matrix, where TA and NIL tallies are in same row
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
new_row = c(rc_no_leg[r,1:7],rc_no_leg[r,9],rc_no_leg[r+1,9])
rc_by_vote = rbind(rc_by_vote,new_row)
}
}
rownames(rc_by_vote)=NULL
colnames(rc_by_vote) = c(colnames(rc_no_leg)[1:7],"TA_Tally", "NIL_Tally")
## dropping first row (which was all NAs, as a placeholder)
rc_by_vote = rc_by_vote[-1,]
months = c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December')
## adding a column of NAs at the back, to be replaced by numeric month value
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote))) ## run both lines as written
for (r in 1:nrow(rc_by_vote)){
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3], collapse = '/')
}
for (r in 1:nrow(rc_by_vote)){
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3], collapse = "/")
}
View(rc_by_vote)
paste(c("one","two","three"),collapse = "/")
for (r in 1:nrow(rc_by_vote)) {
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste( c(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3]), collapse = "/")
}
cbind(c(1:3),c(4:6),c(5:7))
ncol(rc_by_vote)
nums = c(1:nrow(rc_by_vote))
nums
colnames(rc_by_vote)
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9],)
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
View(vote_output)
colnames(rc_by_vote)
colnames(rc_by_vote)[10,11] = c("numeric_month","numeric_date")
colnames(rc_by_vote)[10:11] = c("numeric_month","numeric_date")
View(rc_by_vote)
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
View(vote_output)
View(vote_output)
Number = c(1:nrow(rc_by_vote))
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
View(vote_output)
vote_output = NULL
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
View(vote_output)
rm(list=ls())
rc_full = read.csv('seanad_sep12-cur_votes.csv', stringsAsFactors = F)
names = names(rc_full)
rc_full = as.matrix(rc_full)
names(rc_full) = names
rc_no_leg = rc_full[,1:9]
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
if (any(rc_no_leg[r,1:6]!=(rc_no_leg[r+1,1:6]))){
print("problem")  }
}
}
## no problem! All pairs of rows match up perfectly, except for TA/NIL split
rc_by_vote = rep(NA,9)
## creating new matrix, where TA and NIL tallies are in same row
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
new_row = c(rc_no_leg[r,1:7],rc_no_leg[r,9],rc_no_leg[r+1,9])
rc_by_vote = rbind(rc_by_vote,new_row)
}
}
rownames(rc_by_vote)=NULL
colnames(rc_by_vote) = c(colnames(rc_no_leg)[1:7],"TA_Tally", "NIL_Tally")
## dropping first row (which was all NAs, as a placeholder)
rc_by_vote = rc_by_vote[-1,]
months = c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December')
## adding a column of NAs at the back, to be replaced by numeric month value
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote))) ## run both lines as written
for (r in 1:nrow(rc_by_vote)) {
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste( c(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3]), collapse = "/")
}
colnames(rc_by_vote)[10:11] = c("numeric_month","numeric_date")
Number = c(1:nrow(rc_by_vote))
## number, file_name, date, subject, result, ta_tally, nil_tally
vote_output = cbind(nums,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
vote_output = cbind(Number,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
View(vote_output)
colnames(vote_output)[2:3] = c("File","Date")
View(vote_output)
?write.csv()
write.csv(vote_output,"IrelandSeanadSep12toPresent-Votes.csv")
source('~/Desktop/gitstuff/ireland_minutes/seanad_sep12-cur_re-format.R')
getwd()
rm(list=ls())
setwd('~/Desktop/gitstuff/ireland_minutes')
getwd()
list.files()
#rc_full = read.csv('seanad_sep12-cur_votes.csv', stringsAsFactors = F)
rc_full = read.csv('seanad_jan04-sep12_votes_orig.csv', stringsAsFactors = F)
names = names(rc_full)
rc_full = as.matrix(rc_full)
names(rc_full) = names
rc_no_leg = rc_full[,1:9]
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
if (any(rc_no_leg[r,1:6]!=(rc_no_leg[r+1,1:6]))){
print("problem")  }
}
}
## no problem! All pairs of rows match up perfectly, except for TA/NIL split
rc_by_vote = rep(NA,9)
## creating new matrix, where TA and NIL tallies are in same row
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
new_row = c(rc_no_leg[r,1:7],rc_no_leg[r,9],rc_no_leg[r+1,9])
rc_by_vote = rbind(rc_by_vote,new_row)
}
}
rownames(rc_by_vote)=NULL
colnames(rc_by_vote) = c(colnames(rc_no_leg)[1:7],"TA_Tally", "NIL_Tally")
## dropping first row (which was all NAs, as a placeholder)
rc_by_vote = rc_by_vote[-1,]
months = c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December')
## adding a column of NAs at the back, to be replaced by numeric month value
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote))) ## run both lines as written
for (r in 1:nrow(rc_by_vote)) {
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste( c(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3]), collapse = "/")
}
colnames(rc_by_vote)[10:11] = c("numeric_month","numeric_date")
#Number = c(1:nrow(rc_by_vote))
## number, file_name, date, subject, result, ta_tally, nil_tally
#vote_output = cbind(Number,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
vote_output = cbind(rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
colnames(vote_output)[1:2] = c("File","Date")
write.csv(vote_output,"IrelandSeanadJan04toSep12-Votes.csv")
rc_full = read.csv('seanad_jan04-sep12_votes_orig.csv', stringsAsFactors = F)
rc_full = read.csv('seanad_jan04-sep12_votes.csv', stringsAsFactors = F)
names = names(rc_full)
rc_full = as.matrix(rc_full)
names(rc_full) = names
rc_no_leg = rc_full[,1:9]
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
if (any(rc_no_leg[r,1:6]!=(rc_no_leg[r+1,1:6]))){
print("problem")  }
}
}
## no problem! All pairs of rows match up perfectly, except for TA/NIL split
rc_by_vote = rep(NA,9)
## creating new matrix, where TA and NIL tallies are in same row
for (r in 1:nrow(rc_no_leg)){
if (r%%2==1){
new_row = c(rc_no_leg[r,1:7],rc_no_leg[r,9],rc_no_leg[r+1,9])
rc_by_vote = rbind(rc_by_vote,new_row)
}
}
rownames(rc_by_vote)=NULL
colnames(rc_by_vote) = c(colnames(rc_no_leg)[1:7],"TA_Tally", "NIL_Tally")
## dropping first row (which was all NAs, as a placeholder)
rc_by_vote = rc_by_vote[-1,]
months = c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December')
## adding a column of NAs at the back, to be replaced by numeric month value
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote)))
rc_by_vote= cbind( rc_by_vote, rep(NA,nrow(rc_by_vote))) ## run both lines as written
for (r in 1:nrow(rc_by_vote)) {
rc_by_vote[r,ncol(rc_by_vote)-1]=(which(months==rc_by_vote[r,"Month"],arr.ind=T))
rc_by_vote[r,ncol(rc_by_vote)] = paste( c(rc_by_vote[r,1],rc_by_vote[r,ncol(rc_by_vote)-1],rc_by_vote[r,3]), collapse = "/")
}
colnames(rc_by_vote)[10:11] = c("numeric_month","numeric_date")
#Number = c(1:nrow(rc_by_vote))
## number, file_name, date, subject, result, ta_tally, nil_tally
#vote_output = cbind(Number,rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
vote_output = cbind(rc_by_vote[,5],rc_by_vote[,11],rc_by_vote[,6:9])
colnames(vote_output)[1:2] = c("File","Date")
write.csv(vote_output,"IrelandSeanadJan04toSep12-Votes.csv")
View(vote_output)
